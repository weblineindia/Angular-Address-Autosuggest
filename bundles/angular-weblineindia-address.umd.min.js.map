{"version":3,"sources":["../../../projects/address/src/lib/address.service.ts","../../../projects/address/src/lib/address.component.ts","../../../projects/address/src/lib/address.module.ts"],"names":["Injectable","args","providedIn","AddressComponent","this","ADDRESS_COMPONENTS","subpremise","street_number","route","locality","administrative_area_level_1","administrative_area_level_2","country","postal_code","street_name","faPlus","faMinus","streetNumber","selectedAddressArray","isShowStreetField","addressValue","type","Array","default","address","geolocation","x","y","postalcode","state","province","fulladdress","streetaddress","isDuplicate","maxlength","name","id","disabled","value","isMultiple","placeholder","isShowPlus","tabindex","index","changeAddress","EventEmitter","onPlus","blur","focus","prototype","ngOnInit","handleAddressChange","event","addressArray","place","undefined","address_components","formatResult","dataObj","data","emit","geometry","location","lat","lng","push","countryCode","premise","uniqueAddressValidate","map","item","key","formatted_address","onBlur","onFocus","onPlusClick","returnData","countryName","postalCode","streetName","i","length","addressType","types","addressTypeValue","commaSeparator","space","selectedAddress","returnObject","notStreetNumber","Component","selector","template","Input","Output","NgModule","declarations","imports","GooglePlaceModule","FontAwesomeModule","FormsModule","ReactiveFormsModule","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddressService {\n\n  constructor() { }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'lib-address',\n  templateUrl: './address.component.html',\n  styleUrls: ['./address.component.css']\n})\nexport class AddressComponent {\n\n  ADDRESS_COMPONENTS: any = {\n    subpremise: 'short_name',\n    street_number: 'short_name',\n    route: 'long_name',\n    locality: 'long_name',\n    administrative_area_level_1: 'short_name',\n    administrative_area_level_2: 'long_name',\n    country: 'long_name',\n    postal_code: 'short_name',\n    street_name: 'short_name'\n  };\n\n  faPlus: any = faPlus;\n  faMinus: any = faMinus;\n  notStreetNumber: Boolean;\n  streetNumber: String = '';\n  selectedAddressArray: any = [];\n\n  @Input() isShowStreetField: Boolean = true;\n  @Input() addressValue: any = {\n    // Array of Object of multiple address\n    type: Array,\n    default: [\n      {\n        address: '',\n        geolocation: { x: 0, y: 0 },\n        country: '',\n        locality: '',\n        postalcode: '',\n        state: '',\n        province: '',\n        fulladdress: '',\n        streetaddress: '',\n        isDuplicate: false\n      }\n    ]\n  };\n  @Input() addressOptions: any;\n  @Input() addressArray: any;\n  @Input() addressUniqueErrorMsg: String;\n  @Input() maxlength: Number = 50;\n  @Input() name: String = '';\n  @Input() id: String = '';\n  @Input() disabled: Boolean = false;\n  @Input() value: String = '';\n  @Input() isMultiple: Boolean = true;\n  @Input() placeholder: String = 'Email';\n  @Input() isShowPlus: Boolean = false;\n  @Input() tabindex: Number = 0;\n  @Input() index: Number = 0;\n  @Output() changeAddress: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onPlus: EventEmitter<any> = new EventEmitter<any>();\n  @Output() blur: EventEmitter<any> = new EventEmitter<any>();\n  @Output() focus: EventEmitter<any> = new EventEmitter<any>();\n\n  ngOnInit() {}\n\n  handleAddressChange(event, index, addressArray) {\n    const place = event;\n    if (place.address_components !== undefined) {\n      this.selectedAddressArray[index] = this.formatResult(place);\n      let dataObj = { data: this.formatResult(place), index: index };\n      this.changeAddress.emit(dataObj);\n    } else {\n      this.value = place.name;\n      const data = [];\n      var geolocation;\n      if (place.geometry !== undefined) {\n        geolocation = {\n          x:\n            place.geometry.location.lat() === undefined\n              ? ''\n              : place.geometry.location.lat(),\n          y:\n            place.geometry.location.lng() === undefined\n              ? ''\n              : place.geometry.location.lat()\n        };\n      } else {\n        geolocation = {\n          x: '',\n          y: ''\n        };\n      }\n      data.push({\n        address: this.value,\n        geolocation: geolocation,\n        countryCode: 'it',\n        fulladdress: this.value,\n        country: '',\n        locality: '',\n        streetaddress: '',\n        premise: '',\n        postalcode: '',\n        state: '',\n        province: '',\n        isDuplicate: false\n      });\n      this.selectedAddressArray.push(data);\n      let dataObj = { data: data, index: index };\n      this.changeAddress.emit(dataObj);\n    }\n    this.uniqueAddressValidate(addressArray, index, event);\n  }\n\n  uniqueAddressValidate(addressArray, index, event) {\n    addressArray.map((item, key) => {\n      if (key !== index) {\n        if (item.address[0].address === event.formatted_address) {\n          addressArray[index].address[0].isDuplicate = true;\n        }\n      }\n    });\n  }\n\n  onBlur(event, index) {\n    let data = { event: event, index: index };\n    this.blur.emit(data);\n  }\n  onFocus(event, index) {\n    let data = { event: event, index: index };\n    this.focus.emit(data);\n  }\n  onPlusClick() {\n    this.onPlus.emit();\n  }\n\n  formatResult(place) {\n    const returnData = [];\n    let countryName = '';\n    let locality = '';\n    let postalCode = '';\n    let province = '';\n    let streetName = '';\n    var streetNumber;\n    let state = '';\n    for (let i = 0; i < place.address_components.length; i++) {\n      const addressType = place.address_components[i].types[0];\n\n      const addressTypeValue =\n        place.address_components[i][this.ADDRESS_COMPONENTS[addressType]];\n      switch (addressType) {\n        case 'country':\n          countryName = addressTypeValue;\n          break;\n        case 'locality':\n          locality = addressTypeValue;\n          break;\n        case 'postal_code':\n          postalCode = addressTypeValue;\n          break;\n        case 'administrative_area_level_1':\n          state = addressTypeValue;\n          break;\n        case 'administrative_area_level_2':\n          province = addressTypeValue;\n          break;\n        case 'street_number':\n          streetNumber = addressTypeValue;\n          break;\n        case 'street_name':\n          streetName = addressTypeValue;\n          break;\n      }\n      const geolocation = {\n        x: place.geometry.location.lat(),\n        y: place.geometry.location.lng()\n      };\n      const commaSeparator = streetNumber ? ', ' : '';\n      const space = streetName ? ' ' : '';\n      let selectedAddress = '';\n      let address = place.formatted_address;\n      if (streetNumber > 0) {\n        selectedAddress = place.formatted_address;\n      } else {\n        if (streetNumber !== undefined) {\n          selectedAddress =\n            streetNumber + commaSeparator + place.formatted_address;\n        } else {\n          selectedAddress = place.formatted_address;\n        }\n      }\n      var returnObject = {\n        geolocation: geolocation,\n        fulladdress: selectedAddress,\n        address: selectedAddress,\n        country: countryName,\n        locality: locality,\n        streetaddress: streetNumber + space + streetName,\n        premise: countryName,\n        postalcode: postalCode,\n        state: state,\n        province: province,\n        countryCode: 'it',\n        isDuplicate: false\n      };\n    }\n    if (\n      returnObject.streetaddress === '' ||\n      returnObject.streetaddress === 'undefined'\n    ) {\n      this.notStreetNumber = true;\n    } else {\n      this.notStreetNumber = false;\n    }\n    returnData.push(returnObject);\n    return returnData;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AddressComponent } from './address.component';\nimport { GooglePlaceModule } from \"ngx-google-places-autocomplete\";\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'; \nimport { CommonModule } from '@angular/common';\n\n\n@NgModule({\n  declarations: [AddressComponent],\n  imports: [\n    GooglePlaceModule,\n    FontAwesomeModule,\n    FormsModule,                               \n    ReactiveFormsModule ,\n    CommonModule\n\n  ],\n  exports: [AddressComponent]\n})\nexport class AddressModule { }\n"]}